
import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { toast } from "@/hooks/use-toast";
import { Download } from "lucide-react";

interface ReviewAlertDialogProps {
  isOpen: boolean;
  onClose: () => void;
  alertId: number;
  alertTitle: string;
}

const ReviewAlertDialog = ({
  isOpen,
  onClose,
  alertId,
  alertTitle,
}: ReviewAlertDialogProps) => {
  const [comments, setComments] = useState("");
  const [action, setAction] = useState("");
  const [contactPerson, setContactPerson] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = () => {
    if (!action) {
      toast({
        title: "Action required",
        description: "Please select an action to continue",
        variant: "destructive",
      });
      return;
    }

    setIsSubmitting(true);
    
    // Simulate API call
    setTimeout(() => {
      setIsSubmitting(false);
      toast({
        title: "Alert reviewed",
        description: `Alert #${alertId} has been marked as ${action}`,
      });
      
      // Reset form and close dialog
      resetForm();
      onClose();
    }, 1000);
  };

  const resetForm = () => {
    setComments("");
    setAction("");
    setContactPerson("");
  };

  const handleDownloadReport = () => {
    if (!action) {
      toast({
        title: "Cannot download report",
        description: "Please complete the review first",
        variant: "destructive",
      });
      return;
    }

    // Generate report content
    const reportContent = generateReportContent();
    
    // Create a Blob from the report content
    const blob = new Blob([reportContent], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    
    // Create a download link and trigger the download
    const link = document.createElement("a");
    link.href = url;
    link.download = `alert-${alertId}-report.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    // Clean up
    URL.revokeObjectURL(url);
    
    toast({
      title: "Report downloaded",
      description: `Report for Alert #${alertId} has been downloaded`,
    });
  };

  const generateReportContent = () => {
    const currentDate = new Date().toISOString().split("T")[0];
    return `ALERT REVIEW REPORT
------------------
Date: ${currentDate}
Alert ID: ${alertId}
Alert Title: ${alertTitle}

REVIEW DETAILS
------------------
Action Taken: ${action}
Contact Person: ${contactPerson || "None"}

COMMENTS
------------------
${comments || "No comments provided"}

Report generated by TransMatch Guardian system.
`;
  };

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>Review Alert #{alertId}</DialogTitle>
          <DialogDescription>
            Add your review comments and mark an action for this alert.
          </DialogDescription>
        </DialogHeader>
        
        <div className="grid gap-4 py-4">
          <div className="grid gap-2">
            <label htmlFor="action" className="text-sm font-medium">
              Action Taken
            </label>
            <Select value={action} onValueChange={setAction}>
              <SelectTrigger id="action">
                <SelectValue placeholder="Select an action" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="investigating">Investigating</SelectItem>
                <SelectItem value="resolved">Resolved</SelectItem>
                <SelectItem value="dismissed">Dismissed as False Positive</SelectItem>
                <SelectItem value="escalated">Escalated to Management</SelectItem>
                <SelectItem value="reported">Reported to Authorities</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <div className="grid gap-2">
            <label htmlFor="contact" className="text-sm font-medium">
              Person Contacted
            </label>
            <Input
              id="contact"
              placeholder="Name of person contacted (if applicable)"
              value={contactPerson}
              onChange={(e) => setContactPerson(e.target.value)}
            />
          </div>
          
          <div className="grid gap-2">
            <label htmlFor="comments" className="text-sm font-medium">
              Review Comments
            </label>
            <Textarea
              id="comments"
              placeholder="Add your review comments here..."
              rows={4}
              value={comments}
              onChange={(e) => setComments(e.target.value)}
            />
          </div>
        </div>
        
        <DialogFooter className="flex items-center justify-between sm:justify-between">
          <Button
            variant="outline"
            onClick={handleDownloadReport}
            disabled={!action}
            className="flex items-center gap-2"
          >
            <Download className="h-4 w-4" />
            Download Report
          </Button>
          <div className="flex gap-2">
            <Button variant="outline" onClick={onClose}>
              Cancel
            </Button>
            <Button onClick={handleSubmit} disabled={isSubmitting}>
              {isSubmitting ? "Submitting..." : "Submit Review"}
            </Button>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default ReviewAlertDialog;
